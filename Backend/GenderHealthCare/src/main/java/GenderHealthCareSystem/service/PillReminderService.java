package GenderHealthCareSystem.service;

import GenderHealthCareSystem.model.Account;
import GenderHealthCareSystem.model.PillSchedule;
import GenderHealthCareSystem.model.Pills;
import GenderHealthCareSystem.repository.AccountRepository;
import GenderHealthCareSystem.repository.PillRepository;
import GenderHealthCareSystem.repository.PillScheduleRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;


import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class PillReminderService {
    private final PillRepository pillRepository;
    private final PillScheduleRepository scheduleRepository;
    private final JavaMailSender mailSender;
    private final AccountRepository accountRepository;


    /** G·ª≠i mail & (optionally) in‚Äëapp notification m·ªói ng√†y 07:00 */
//    @Scheduled(cron = "0 * * * * *")
//    public void sendReminders() {
//        LocalDate today = LocalDate.now();
//        for (Pills pill : pillRepository.findByIsActiveTrue()) {
//            // Check schedule ch∆∞a u·ªëng h√¥m nay
//            if (scheduleRepository
//                    .findByPill_PillIdAndPillDateAndHasTakenFalse(pill.getPillId(), today)
//                    .isEmpty()) continue;
//
//            // DAILY lu√¥n g·ª≠i, WEEKLY ch·ªâ g·ª≠i khi ƒë√∫ng b·ªôi 7
//            boolean send = pill.getNotificationFrequency() == Pills.NotificationFrequency.DAILY;
//            if (!send && pill.getNotificationFrequency() == Pills.NotificationFrequency.WEEKLY) {
//                long offset = ChronoUnit.DAYS.between(pill.getStartDate(), today);
//                send = offset % 7 == 0;
//            }
//            if (!send) continue;
//
//            // L·∫•y schedule ƒë·ªÉ c√≥ token
//            PillSchedule sch = scheduleRepository
//                    .findByPill_PillIdAndPillDateAndHasTakenFalse(pill.getPillId(), today).get();
//
//            String link = String.format(
//                    "http://localhost:8080/api/pills/schedule/%d/confirm?token=%s",
//                    sch.getScheduleId(), sch.getConfirmToken()
//            );
//
//            Optional<Account> optAcct = accountRepository.findByUsers_UserId(pill.getCustomer().getUserId());
//            if (optAcct.isEmpty()) continue; // Kh√¥ng c√≥ t√†i kho·∫£n => b·ªè qua
//            String email = optAcct.get().getEmail();
//            SimpleMailMessage msg = new SimpleMailMessage();
//            msg.setTo(email);
//            msg.setSubject("Nh·∫Øc u·ªëng thu·ªëc ng√†y " + today);
//            msg.setText(
//                    "Ch√†o " + pill.getCustomer().getFullName() + ",\n\n" +
//                            "B·∫°n c·∫ßn u·ªëng thu·ªëc lo·∫°i " + pill.getPillType() + " v√†o h√¥m nay.\n" +
//                            "N·∫øu ƒë√£ u·ªëng, click v√†o ƒë√¢y:\n" + link
//            );
//            mailSender.send(msg);
//            System.out.println("üì® ƒê√£ g·ª≠i mail ƒë·∫øn: " + email);
//            // TODO: ƒë·∫©y in‚Äëapp notification n·∫øu c·∫ßn
//        }
//    }
    @Transactional
    @Scheduled(cron = "0 * * * * *") // M·ªói ph√∫t
    public void sendReminders() {
        LocalDate today = LocalDate.now();
        System.out.println("‚è∞ B·∫Øt ƒë·∫ßu ki·ªÉm tra g·ª≠i mail v√†o: " + today);

        for (Pills pill : pillRepository.findByIsActiveTrue()) {
            System.out.println("üîç ƒêang x√©t pillID: " + pill.getPillId());

            Optional<PillSchedule> optSch = scheduleRepository
                    .findByPill_PillIdAndPillDateAndHasTakenFalse(pill.getPillId(), today);

            if (optSch.isEmpty()) {
                System.out.println("‚õî Kh√¥ng c√≥ l·ªãch u·ªëng h√¥m nay ch∆∞a u·ªëng cho pillID: " + pill.getPillId());
                continue;
            }
            System.out.println("‚úÖ T√¨m th·∫•y l·ªãch u·ªëng h√¥m nay ch∆∞a u·ªëng.");

            boolean send = pill.getNotificationFrequency() == Pills.NotificationFrequency.DAILY;
            if (!send && pill.getNotificationFrequency() == Pills.NotificationFrequency.WEEKLY) {
                long offset = ChronoUnit.DAYS.between(pill.getStartDate(), today);
                send = offset % 7 == 0;
                System.out.println("üìÜ T·∫ßn su·∫•t weekly - offset: " + offset + ", g·ª≠i? " + send);
            }

            if (!send) {
                System.out.println("üö´ Kh√¥ng ƒë·∫øn ng√†y g·ª≠i theo t·∫ßn su·∫•t.");
                continue;
            }

            PillSchedule sch = optSch.get();

            Optional<Account> optAcct = accountRepository.findByUsers_UserId(pill.getCustomer().getUserId());
            if (optAcct.isEmpty()) {
                System.out.println("üö´ Kh√¥ng t√¨m th·∫•y account v·ªõi userID: " + pill.getCustomer().getUserId());
                continue;
            }

            String email = optAcct.get().getEmail();
            String link = String.format(
                    "http://localhost:8080/api/pills/schedule/%d/confirm?token=%s",
                    sch.getScheduleId(), sch.getConfirmToken()
            );

            SimpleMailMessage msg = new SimpleMailMessage();
            msg.setTo(email);
            msg.setSubject("Nh·∫Øc u·ªëng thu·ªëc ng√†y " + today);
            msg.setText(
                    "Ch√†o " + pill.getCustomer().getFullName() + ",\n\n" +
                            "B·∫°n c·∫ßn u·ªëng thu·ªëc lo·∫°i " + pill.getPillType() + " v√†o h√¥m nay.\n" +
                            "N·∫øu ƒë√£ u·ªëng, click v√†o ƒë√¢y:\n" + link
            );

            try {
                mailSender.send(msg);
                System.out.println("üì® ƒê√£ g·ª≠i mail ƒë·∫øn: " + email);
            } catch (Exception e) {
                System.out.println("‚ùå G·ª≠i mail th·∫•t b·∫°i: " + e.getMessage());
            }
        }
    }

}